# Import the render function, which combines a given template with a context dictionary and returns an HttpResponse object with that rendered text.
# Import the get_object_or_404 function, which is used to get an object from the database, or raise a 404 error if the object does not exist.
from django.shortcuts import render, get_object_or_404

# Import the Post model from the current package's models module.
# This is the model we'll use to interact with the blog posts in the database.
from .models import Post

# Define the post_list view function.
# This view is responsible for displaying a list of posts.
# It takes the HttpRequest object as its first parameter, as all view functions do.
def post_list(request):
    # Retrieve all Post objects from the database.
    posts = Post.objects.all()
    my_conttext = {'posts':posts}
    # Use the render function to generate an HttpResponse.
    # The response includes the content generated by rendering the 'blog/post_list.html' template.
    # The context dictionary {'posts': posts} is passed to the template, allowing it to access the list of posts.
    return render(request, 'blog/post_list.html', my_conttext)



def post_detail(request, post_id):
    """
    View function for displaying a single blog post based on its post_id.
    
    Args:
        request: HttpRequest object, represents the HTTP request sent to the server.
        post_id: An integer, represents the unique ID of the blog post to be displayed.
    
    Returns:
        HttpResponse object that renders the specified blog post template,
        filled with context data (here, the blog post to display).
    """
    
    # Fetch the Post object from the database that matches the given post_id.
    # Use get_object_or_404() to return the Post object if it exists, 
    # or raise an Http404 error if no Post with the provided ID is found.
    # This is a shortcut to make sure the view function only proceeds if the post exists,
    # enhancing user experience by showing a standard 404 error for missing posts.
    post = get_object_or_404(Post, id=post_id)
    
    # Render the template specified by the first argument ('blog/post_detail.html').
    # The 'request' object is passed as the first parameter to maintain the context of the HTTP request.
    # A dictionary {'post': post} is passed as the third argument, specifying the context data for the template.
    # This dictionary allows us to use the 'post' variable inside the template to access the Post object's attributes,
    # such as title, author, created_on, etc., enabling dynamic content rendering based on the Post object retrieved.
    return render(request, 'blog/post_detail.html', {'post': post})
















# Define the post_detail view function.
# This view is responsible for displaying a single post in detail.
# It takes the HttpRequest object and a post_id parameter, which represents the primary key of the Post to be displayed.
def post_detail(request, post_id):
    # Use get_object_or_404 to retrieve the Post object with the primary key equal to post_id from the database.
    # If no such Post exists, raise an HTTP 404 error.
    post = get_object_or_404(Post, pk=post_id)
    
    # Use the render function to generate an HttpResponse.
    # The response includes the content generated by rendering the 'blog/post_detail.html' template.
    # The context dictionary {'post': post} is passed to the template, allowing it to access the Post object.
    return render(request, 'blog/post_detail.html', {'post': post})
